/*
 * generated by Xtext 2.10.0
 */
package org.xtext.grupox.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TeamworkGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TeamworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.grupox.Teamwork.Teamwork");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsProjectParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//// It says that a Teamwork contains an arbitrary number (*) of Projects 
		//// which are added (+=) to a feature called elements.
		//Teamwork:
		//	elements+=Project*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Project*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Project
		public RuleCall getElementsProjectParserRuleCall_0() { return cElementsProjectParserRuleCall_0; }
	}
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.grupox.Teamwork.Project");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHeaderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTaskParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// The rule Project delegates to either the rule Task or (|) the rule Entity.
		//Project:
		//	Header | Task;
		@Override public ParserRule getRule() { return rule; }
		
		//Header | Task
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Header
		public RuleCall getHeaderParserRuleCall_0() { return cHeaderParserRuleCall_0; }
		
		//Task
		public RuleCall getTaskParserRuleCall_1() { return cTaskParserRuleCall_1; }
	}
	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.grupox.Teamwork.Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// The rule DataType starts with a keyword 'datatype', 
		//// followed by an identifier which is parsed by a rule called ID. 
		//// The rule ID is defined in the super grammar org.eclipse.xtext.common.Terminals 
		//// and parses a single word, a.k.a identifier
		//// The value returned by the call to ID is assigned (=) to the feature name.
		//Task:
		//	INT ';' STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//INT ';' STRING
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
	}
	public class HeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.grupox.Teamwork.Header");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Header:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final TeamworkElements pTeamwork;
	private final ProjectElements pProject;
	private final TaskElements pTask;
	private final HeaderElements pHeader;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TeamworkGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTeamwork = new TeamworkElements();
		this.pProject = new ProjectElements();
		this.pTask = new TaskElements();
		this.pHeader = new HeaderElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.grupox.Teamwork".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// It says that a Teamwork contains an arbitrary number (*) of Projects 
	//// which are added (+=) to a feature called elements.
	//Teamwork:
	//	elements+=Project*;
	public TeamworkElements getTeamworkAccess() {
		return pTeamwork;
	}
	
	public ParserRule getTeamworkRule() {
		return getTeamworkAccess().getRule();
	}
	
	//// The rule Project delegates to either the rule Task or (|) the rule Entity.
	//Project:
	//	Header | Task;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//// The rule DataType starts with a keyword 'datatype', 
	//// followed by an identifier which is parsed by a rule called ID. 
	//// The rule ID is defined in the super grammar org.eclipse.xtext.common.Terminals 
	//// and parses a single word, a.k.a identifier
	//// The value returned by the call to ID is assigned (=) to the feature name.
	//Task:
	//	INT ';' STRING;
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}
	
	//Header:
	//	STRING;
	public HeaderElements getHeaderAccess() {
		return pHeader;
	}
	
	public ParserRule getHeaderRule() {
		return getHeaderAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
